"use client"

import type React from "react"

import { useState } from "react"
import { Upload, FileText, Loader2, Download, AlertTriangle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"

interface FeedbackCategory {
  category: string
  items: string[]
  severity: "high" | "medium" | "low"
}

interface AnalysisResult {
  feedback: FeedbackCategory[]
  overall_score: number
  summary: string
  usedDemoContent?: boolean
}

export default function ResumeAnalyzer() {
  const [file, setFile] = useState<File | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [result, setResult] = useState<AnalysisResult | null>(null)
  const [error, setError] = useState<string | null>(null)

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0]
    if (selectedFile && selectedFile.type === "application/pdf") {
      setFile(selectedFile)
      setError(null)
      setResult(null)
    } else {
      setError("Please select a valid PDF file")
      setFile(null)
    }
  }

  const analyzeResume = async () => {
    if (!file) return

    setIsAnalyzing(true)
    setError(null)

    try {
      const formData = new FormData()
      formData.append("resume", file)

      const response = await fetch("/api/analyze-resume", {
        method: "POST",
        body: formData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "Failed to analyze resume")
      }

      const data = await response.json()

      // Validate the response structure
      if (!data.overall_score || !data.summary || !data.feedback) {
        throw new Error("Invalid response format from AI analysis")
      }

      setResult(data)
    } catch (err) {
      console.error("Analysis error:", err)
      setError(err instanceof Error ? err.message : "Failed to analyze resume. Please try again.")
    } finally {
      setIsAnalyzing(false)
    }
  }

  const downloadFeedback = () => {
    if (!result) return

    const feedbackText = `Resume Analysis Report
    
Overall Score: ${result.overall_score}/100

Summary: ${result.summary}

Detailed Feedback:
${result.feedback
  .map(
    (category) => `
${category.category.toUpperCase()} (${category.severity.toUpperCase()} PRIORITY):
${category.items.map((item) => `â€¢ ${item}`).join("\n")}
`,
  )
  .join("\n")}

Generated by AI Resume Analyzer`

    const blob = new Blob([feedbackText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "resume-feedback.txt"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "destructive"
      case "medium":
        return "default"
      case "low":
        return "secondary"
      default:
        return "default"
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "high":
        return "ðŸ”´"
      case "medium":
        return "ðŸŸ¡"
      case "low":
        return "ðŸŸ¢"
      default:
        return "âšª"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">AI Resume Analyzer</h1>
          <p className="text-lg text-gray-600">Get instant AI-powered feedback to improve your resume</p>
        </div>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Upload className="h-5 w-5" />
              Upload Your Resume
            </CardTitle>
            <CardDescription>Upload a PDF file to get detailed analysis and improvement suggestions</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-center w-full">
              <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <FileText className="w-8 h-8 mb-4 text-gray-500" />
                  <p className="mb-2 text-sm text-gray-500">
                    <span className="font-semibold">Click to upload</span> or drag and drop
                  </p>
                  <p className="text-xs text-gray-500">PDF files only</p>
                </div>
                <input type="file" className="hidden" accept=".pdf" onChange={handleFileChange} />
              </label>
            </div>

            {file && (
              <div className="flex items-center gap-2 p-3 bg-green-50 rounded-lg">
                <FileText className="h-4 w-4 text-green-600" />
                <span className="text-sm text-green-800">{file.name}</span>
              </div>
            )}

            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <Button onClick={analyzeResume} disabled={!file || isAnalyzing} className="w-full" size="lg">
              {isAnalyzing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Analyzing Resume...
                </>
              ) : (
                "Analyze Resume"
              )}
            </Button>
          </CardContent>
        </Card>

        {result && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  Analysis Results
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-lg px-3 py-1">
                      Score: {result.overall_score}/100
                    </Badge>
                    <Button onClick={downloadFeedback} variant="outline" size="sm">
                      <Download className="h-4 w-4 mr-2" />
                      Download Report
                    </Button>
                  </div>
                </CardTitle>
                <CardDescription>{result.summary}</CardDescription>

                {result.usedDemoContent && (
                  <Alert className="mt-4 bg-amber-50 border-amber-200">
                    <AlertTriangle className="h-4 w-4 text-amber-600" />
                    <AlertDescription className="text-amber-800">
                      Note: We had difficulty extracting text from your PDF. The analysis is based on a sample resume
                      format.
                    </AlertDescription>
                  </Alert>
                )}
              </CardHeader>
            </Card>

            <div className="grid gap-6">
              {result.feedback.map((category, index) => (
                <Card key={index}>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <span>{getSeverityIcon(category.severity)}</span>
                      {category.category}
                      <Badge variant={getSeverityColor(category.severity)}>{category.severity} priority</Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {category.items.map((item, itemIndex) => (
                        <li key={itemIndex} className="flex items-start gap-2">
                          <span className="text-blue-500 mt-1">â€¢</span>
                          <span className="text-gray-700">{item}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        <div className="mt-12 text-center">
          <p className="text-sm text-gray-500">Built for LIVE AI Lone Star 2025 Hackathon</p>
        </div>
      </div>
    </div>
  )
}
